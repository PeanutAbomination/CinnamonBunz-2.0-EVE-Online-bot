try{
var translate = require("translate-google")
var EVEoj = require("EVEoj"),
    SDD = EVEoj.SDD.Create("json", {
        path: "./static"
    }),
    map;

SDD.LoadMeta()
.then(function() {
    map = EVEoj.map.Create(SDD, "K");
    return map.Load();
})
.then(function() {
    const start = options.getString("start")
    const end = options.getString("end")
    if((map.GetSystem({name: `${start}`}))){
        if((map.GetSystem({name: `${end}`}))){
            var pFilter = options.getString("security")
            if(!(pFilter == undefined)){
                console.log(pFilter)
                if((pFilter == "safe") || (pFilter == "fast") || (pFilter == "unsafe")){
                    var exist = "1"
                    if(pFilter == "safe"){
                        var avoidLow = true
                        var avoidHigh = false
                    }else
                    if(pFilter == "fast"){
                        var avoidLow = true
                        var avoidHigh = true
                    }else
                    if(pFilter == "unsafe"){
                        var avoidLow = false
                        var avoidHigh = true
                    }
                    
                    var starSystem1 = map.GetSystem({name: `${start}`});
                    var  starSystem2 = map.GetSystem({name: `${end}`});
                    var route = (map.Route(starSystem1.ID, starSystem2.ID, [], avoidLow, avoidHigh) + "").split(",")
                    for (let steps = 0; steps < route.length; steps++){
                    var routeName = routeName + ` > ${map.GetSystem({id: route[steps]}).name} [${map.GetSystem({id: route[steps]}).sec}]`
                    }
                    translate(['Route path created!', 'Route length:','path'], {from: 'en', to: defaultLang}).then(res => {
                    let routePath = new Discord.MessageEmbed()
                    .setTitle(`${res[0]}`)
                    .setFields(
                        {name: `${res[1]}`, value: `**${route.length}**` },
                        {name: `${res[2] + ":"}`, value: (`**${start} [${map.GetSystem({name: start}).sec}]` + `${routeName}**`).replace(undefined,"")}
                    )
                    .setColor("BLUE")
                    .setFooter(`${interaction.user.tag}`,`${interaction.user.avatarURL()}`)
                    interaction.reply({
                      embeds:[routePath],
                      ephemeral:false
                    })
                })
                    }else
                    if(!(pFilter == "safe") && (pFilter == "fast") && (pFilter == "unsafe")){
                        translate(['Route path creation unsuccessful', 'Possible reason: `user slash command option(security) invalid`','Use `/help route` for help for route command'], {from: 'en', to: defaultLang}).then(res => {
                        let routePath = new Discord.MessageEmbed()
                    .setTitle(`${res[0]}`)
                    .setDescription(`${res[1]+`\n\n`+res[2]}`)
                    .setColor("RED")
                    .setFooter(`${interaction.user.tag}`,`${interaction.user.avatarURL()}`)
                    interaction.reply({
                      embeds:[routePath],
                      ephemeral:false
                    })
                })
                    }
                }
            }
        }
    })
}catch(e){
    let routePath = new Discord.MessageEmbed()
    .setTitle("Route path creation unsuccessful")
    .setDescription("Possible reason: `user slash command option(start OR end OR security) invalid`\n\nUse `/help route` for help for route command")
    .setColor("RED")
    .setFooter(`${interaction.user.tag}`,`${interaction.user.avatarURL()}`)
    interaction.reply({
      embeds:[routePath],
      ephemeral:false
    })
    console.log(e)
    throw e;
    
}